/* automatically generated by rust-bindgen */


/// \brief Environment initialization options
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spdk_env_opts {
    pub name: *const ::std::os::raw::c_char,
    pub core_mask: *const ::std::os::raw::c_char,
    pub shm_id: ::std::os::raw::c_int,
    pub mem_channel: ::std::os::raw::c_int,
    pub master_core: ::std::os::raw::c_int,
    pub mem_size: ::std::os::raw::c_int,
    pub no_pci: bool,
    pub hugepage_single_segments: bool,
    pub unlink_hugepage: bool,
    pub num_pci_addr: usize,
    pub pci_blacklist: *mut spdk_pci_addr,
    pub pci_whitelist: *mut spdk_pci_addr,
    /// Opaque context for use of the env implementation.
    pub env_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_spdk_env_opts() {
    assert_eq!(
        ::std::mem::size_of::<spdk_env_opts>(),
        72usize,
        concat!("Size of: ", stringify!(spdk_env_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<spdk_env_opts>(),
        8usize,
        concat!("Alignment of ", stringify!(spdk_env_opts))
    );
}
impl Default for spdk_env_opts {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    /// Initialize the default value of opts.
    ///
    /// \param opts Data structure where SPDK will initialize the default options.
    pub fn spdk_env_opts_init(opts: *mut spdk_env_opts);
}
extern "C" {
    /// Initialize the environment library. This must be called prior to using
    /// any other functions in this library.
    ///
    /// \param opts Environment initialization options.
    /// \return 0 on success, or negative errno on failure.
    pub fn spdk_env_init(opts: *const spdk_env_opts) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Allocate a pinned, physically contiguous memory buffer with the given size
    /// and alignment.
    ///
    /// \param size Size in bytes.
    /// \param align Alignment value for the allocated memory. If '0', the allocated
    /// buffer is suitably aligned (in the same manner as malloc()). Otherwise, the
    /// allocated buffer is aligned to the multiple of align. In this case, it must
    /// be a power of two.
    /// \param phys_addr A pointer to the variable to hold the physical address of
    /// the allocated buffer is passed. If NULL, the physical address is not returned.
    ///
    /// \return a pointer to the allocated memory buffer.
    pub fn spdk_dma_malloc(
        size: usize,
        align: usize,
        phys_addr: *mut u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Allocate a pinned, physically contiguous memory buffer with the given size,
    /// alignment and socket id.
    ///
    /// \param size Size in bytes.
    /// \param align Alignment value for the allocated memory. If '0', the allocated
    /// buffer is suitably aligned (in the same manner as malloc()). Otherwise, the
    /// allocated buffer is aligned to the multiple of align. In this case, it must
    /// be a power of two.
    /// \param phys_addr A pointer to the variable to hold the physical address of
    /// the allocated buffer is passed. If NULL, the physical address is not returned.
    /// \param socket_id Socket ID to allocate memory on, or SPDK_ENV_SOCKET_ID_ANY
    /// for any socket.
    ///
    /// \return a pointer to the allocated memory buffer.
    pub fn spdk_dma_malloc_socket(
        size: usize,
        align: usize,
        phys_addr: *mut u64,
        socket_id: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Allocate a pinned, physically contiguous memory buffer with the given size
    /// and alignment. The buffer will be zeroed.
    ///
    /// \param size Size in bytes.
    /// \param align Alignment value for the allocated memory. If '0', the allocated
    /// buffer is suitably aligned (in the same manner as malloc()). Otherwise, the
    /// allocated buffer is aligned to the multiple of align. In this case, it must
    /// be a power of two.
    /// \param phys_addr A pointer to the variable to hold the physical address of
    /// the allocated buffer is passed. If NULL, the physical address is not returned.
    ///
    /// \return a pointer to the allocated memory buffer.
    pub fn spdk_dma_zmalloc(
        size: usize,
        align: usize,
        phys_addr: *mut u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Allocate a pinned, physically contiguous memory buffer with the given size,
    /// alignment and socket id. The buffer will be zeroed.
    ///
    /// \param size Size in bytes.
    /// \param align Alignment value for the allocated memory. If '0', the allocated
    /// buffer is suitably aligned (in the same manner as malloc()). Otherwise, the
    /// allocated buffer is aligned to the multiple of align. In this case, it must
    /// be a power of two.
    /// \param phys_addr A pointer to the variable to hold the physical address of
    /// the allocated buffer is passed. If NULL, the physical address is not returned.
    /// \param socket_id Socket ID to allocate memory on, or SPDK_ENV_SOCKET_ID_ANY
    /// for any socket.
    ///
    /// \return a pointer to the allocated memory buffer.
    pub fn spdk_dma_zmalloc_socket(
        size: usize,
        align: usize,
        phys_addr: *mut u64,
        socket_id: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Resize the allocated and pinned memory buffer with the given new size and
    /// alignment. Existing contents are preserved.
    ///
    /// \param buf Buffer to resize.
    /// \param size Size in bytes.
    /// \param align Alignment value for the allocated memory. If '0', the allocated
    /// buffer is suitably aligned (in the same manner as malloc()). Otherwise, the
    /// allocated buffer is aligned to the multiple of align. In this case, it must
    /// be a power of two.
    /// \param phys_addr A pointer to the variable to hold the physical address of
    /// the allocated buffer is passed. If NULL, the physical address is not returned.
    ///
    /// \return a pointer to the resized memory buffer.
    pub fn spdk_dma_realloc(
        buf: *mut ::std::os::raw::c_void,
        size: usize,
        align: usize,
        phys_addr: *mut u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Free a memory buffer previously allocated, for example from spdk_dma_zmalloc().
    /// This call is never made from the performance path.
    ///
    /// \param buf Buffer to free.
    pub fn spdk_dma_free(buf: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spdk_mempool {
    _unused: [u8; 0],
}
extern "C" {
    /// Create a thread-safe memory pool.
    ///
    /// \param name Name for the memory pool.
    /// \param count Count of elements.
    /// \param ele_size Element size in bytes.
    /// \param cache_size How many elements may be cached in per-core caches. Use
    /// SPDK_MEMPOOL_DEFAULT_CACHE_SIZE for a reasonable default, or 0 for no per-core cache.
    /// \param socket_id Socket ID to allocate memory on, or SPDK_ENV_SOCKET_ID_ANY
    /// for any socket.
    ///
    /// \return a pointer to the created memory pool.
    pub fn spdk_mempool_create(
        name: *const ::std::os::raw::c_char,
        count: usize,
        ele_size: usize,
        cache_size: usize,
        socket_id: ::std::os::raw::c_int,
    ) -> *mut spdk_mempool;
}
/// An object callback function for memory pool.
///
/// Used by spdk_mempool_create_ctor().
pub type spdk_mempool_obj_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        mp: *mut spdk_mempool,
        opaque: *mut ::std::os::raw::c_void,
        obj: *mut ::std::os::raw::c_void,
        obj_idx: ::std::os::raw::c_uint,
    ),
>;
extern "C" {
    /// Create a thread-safe memory pool with user provided initialization function
    /// and argument.
    ///
    /// \param name Name for the memory pool.
    /// \param count Count of elements.
    /// \param ele_size Element size in bytes.
    /// \param cache_size How many elements may be cached in per-core caches. Use
    /// SPDK_MEMPOOL_DEFAULT_CACHE_SIZE for a reasonable default, or 0 for no per-core cache.
    /// \param socket_id Socket ID to allocate memory on, or SPDK_ENV_SOCKET_ID_ANY
    /// for any socket.
    /// \param obj_init User provided object calllback initialization function.
    /// \param obj_init_arg User provided callback initialization function argument.
    ///
    /// \return a pointer to the created memory pool.
    pub fn spdk_mempool_create_ctor(
        name: *const ::std::os::raw::c_char,
        count: usize,
        ele_size: usize,
        cache_size: usize,
        socket_id: ::std::os::raw::c_int,
        obj_init: spdk_mempool_obj_cb_t,
        obj_init_arg: *mut ::std::os::raw::c_void,
    ) -> *mut spdk_mempool;
}
extern "C" {
    /// Get the name of a memory pool.
    ///
    /// \param mp Memory pool to query.
    ///
    /// \return the name of the memory pool.
    pub fn spdk_mempool_get_name(mp: *mut spdk_mempool) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// Free a memory pool.
    pub fn spdk_mempool_free(mp: *mut spdk_mempool);
}
extern "C" {
    /// Get an element from a memory pool. If no elements remain, return NULL.
    ///
    /// \param mp Memory pool to query.
    ///
    /// \return a pointer to the element.
    pub fn spdk_mempool_get(mp: *mut spdk_mempool) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Get multiple elements from a memory pool.
    ///
    /// \param mp Memory pool to get multiple elements from.
    /// \param ele_arr Array of the elements to fill.
    /// \param count Count of elements to get.
    ///
    /// \return 0 on success, negative errno on failure.
    pub fn spdk_mempool_get_bulk(
        mp: *mut spdk_mempool,
        ele_arr: *mut *mut ::std::os::raw::c_void,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Put an element back into the memory pool.
    ///
    /// \param mp Memory pool to put element back into.
    /// \param ele Element to put.
    pub fn spdk_mempool_put(mp: *mut spdk_mempool, ele: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// Put multiple elements back into the memory pool.
    ///
    /// \param mp Memory pool to put multiple elements back into.
    /// \param ele_arr Array of the elements to put.
    /// \param count Count of elements to put.
    pub fn spdk_mempool_put_bulk(
        mp: *mut spdk_mempool,
        ele_arr: *mut *mut ::std::os::raw::c_void,
        count: usize,
    );
}
extern "C" {
    /// Get the number of entries in the memory pool.
    ///
    /// \param pool Memory pool to query.
    ///
    /// \return the number of entries in the memory pool.
    pub fn spdk_mempool_count(pool: *const spdk_mempool) -> usize;
}
extern "C" {
    /// Get the number of dedicated CPU cores utilized by this env abstraction.
    ///
    /// \return the number of dedicated CPU cores.
    pub fn spdk_env_get_core_count() -> u32;
}
extern "C" {
    /// Get the CPU core index of the current thread.
    ///
    /// This will only function when called from threads set up by
    /// this environment abstraction. For any other threads \c SPDK_ENV_LCORE_ID_ANY
    /// will be returned.
    ///
    /// \return the CPU core index of the current thread.
    pub fn spdk_env_get_current_core() -> u32;
}
extern "C" {
    /// Get the index of the first dedicated CPU core for this application.
    ///
    /// \return the index of the first dedicated CPU core.
    pub fn spdk_env_get_first_core() -> u32;
}
extern "C" {
    /// Get the index of the last dedicated CPU core for this application.
    ///
    /// \return the index of the last dedicated CPU core.
    pub fn spdk_env_get_last_core() -> u32;
}
extern "C" {
    /// Get the index of the next dedicated CPU core for this application.
    ///
    /// If there is no next core, return UINT32_MAX.
    ///
    /// \param prev_core Index of previous core.
    ///
    /// \return the index of the next dedicated CPU core.
    pub fn spdk_env_get_next_core(prev_core: u32) -> u32;
}
extern "C" {
    /// Get the socket ID for the given core.
    ///
    /// \param core CPU core to query.
    ///
    /// \return the socket ID for the given core.
    pub fn spdk_env_get_socket_id(core: u32) -> u32;
}
pub type thread_start_fn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    /// Launch a thread pinned to the given core. Only a single pinned thread may be
    /// launched per core. Subsequent attempts to launch pinned threads on that core
    /// will fail.
    ///
    /// \param core The core to pin the thread to.
    /// \param fn Entry point on the new thread.
    /// \param arg Argument apssed to thread_start_fn
    ///
    /// \return 0 on success, negative errno on failure.
    pub fn spdk_env_thread_launch_pinned(
        core: u32,
        fn_: thread_start_fn,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Wait for all threads to exit before returning.
    pub fn spdk_env_thread_wait_all();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spdk_pci_addr {
    pub domain: u32,
    pub bus: u8,
    pub dev: u8,
    pub func: u8,
}
#[test]
fn bindgen_test_layout_spdk_pci_addr() {
    assert_eq!(
        ::std::mem::size_of::<spdk_pci_addr>(),
        8usize,
        concat!("Size of: ", stringify!(spdk_pci_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<spdk_pci_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(spdk_pci_addr))
    );
}
